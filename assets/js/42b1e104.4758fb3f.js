"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[593],{21206:t=>{t.exports=JSON.parse('{"functions":[{"name":"AddClone","desc":"Clones an Instance and adds it to the Janitor.\\n\\n### Luau:\\n\\n```lua\\nlocal obliterator = Janitor.new()\\nlocal newPart = JanitorUtilities.AddClone(obliterator, Instance.new(\\"Part\\"))\\n```\\n\\n### TypeScript:\\n\\n```ts\\nimport { Janitor } from \\"@rbxts/janitor\\";\\nimport JanitorUtilities from \\"@rbxts/janitor-utilities\\";\\n\\nconst obliterator = new Janitor();\\nconst newPart = JanitorUtilities.AddClone(obliterator, new Instance(\\"Part\\"));\\n```","params":[{"name":"janitor","desc":"The Janitor to add the object to.","lua_type":"Janitor"},{"name":"object","desc":"The Instance to clone.","lua_type":"Instance"},{"name":"methodName?","desc":"The name of the method that will be used to clean up. If not passed, it will first check if the object\'s type exists in TypeDefaults, and if that doesn\'t exist, it assumes `Destroy`.","lua_type":"string"},{"name":"index?","desc":"The index that can be used to clean up the object manually.","lua_type":"unknown"},{"name":"...","desc":"The arguments that will be passed to the constructor.","lua_type":"A..."}],"returns":[{"desc":"The constructed object.","lua_type":"T"}],"function_type":"static","source":{"line":36,"path":"src/AddClone.luau"}},{"name":"AddObject","desc":"Constructs an object for you and adds it to the Janitor. It\'s really just\\nshorthand for `Janitor:Add(object.new(), methodName, index)`. This did\\noriginally exist as part of Janitor\'s API, but it has since been removed\\nin favor of this library.\\n\\n### Luau:\\n\\n```lua\\nlocal obliterator = Janitor.new()\\nlocal subObliterator = JanitorUtilities.AddObject(obliterator, Janitor, \\"Destroy\\")\\n-- subObliterator is another Janitor!\\n```\\n\\n### TypeScript:\\n\\n```ts\\nimport { Janitor } from \\"@rbxts/janitor\\";\\nimport JanitorUtilities from \\"@rbxts/janitor-utilities\\";\\n\\nconst obliterator = new Janitor();\\nconst subObliterator = JanitorUtilities.AddObject(obliterator, Janitor, \\"Destroy\\");\\n```","params":[{"name":"janitor","desc":"The Janitor to add the object to.","lua_type":"Janitor"},{"name":"constructor","desc":"The constructor for the object you want to add to the Janitor.","lua_type":"{new: (A...) -> T}"},{"name":"methodName?","desc":"The name of the method that will be used to clean up. If not passed, it will first check if the object\'s type exists in TypeDefaults, and if that doesn\'t exist, it assumes `Destroy`.","lua_type":"boolean | string"},{"name":"index?","desc":"The index that can be used to clean up the object manually.","lua_type":"unknown"},{"name":"...","desc":"The arguments that will be passed to the constructor.","lua_type":"A..."}],"returns":[{"desc":"The constructed object.","lua_type":"T"}],"function_type":"static","source":{"line":40,"path":"src/AddObject.luau"}},{"name":"AddConnect","desc":"Connects a callback to a signal and adds the returned connection to the\\nJanitor.\\n\\n### Luau:\\n\\n```lua\\nlocal obliterator = Janitor.new()\\nJanitorUtilities.AddConnect(obliterator, script.ChildAdded, function(child)\\nend)\\n```\\n\\n### TypeScript:\\n\\n```ts\\nimport { Janitor } from \\"@rbxts/janitor\\";\\nimport JanitorUtilities from \\"@rbxts/janitor-utilities\\";\\n\\nconst obliterator = new Janitor();\\nJanitorUtilities.AddConnect(obliterator, script.ChildAdded, (child) => {});\\n```\\n\\n\\nconnection manually.","params":[{"name":"janitor","desc":"The Janitor to add the connection to.","lua_type":"Janitor"},{"name":"signal","desc":"The signal to connect to.","lua_type":"Connectable"},{"name":"callback","desc":"The callback to connect.","lua_type":"(A...) -> ()"},{"name":"index?","desc":"The index that can be used to clean up the","lua_type":"unknown"}],"returns":[{"desc":"The connection that was added.","lua_type":"ConnectionLike"}],"function_type":"static","source":{"line":52,"path":"src/AddConnect.luau"}},{"name":"AddNewJanitor","desc":"Adds a new sub-Janitor to the passed Janitor.\\n\\n### Luau:\\n\\n```lua\\nlocal obliterator = Janitor.new()\\nlocal subObliterator = JanitorUtilities.AddNewJanitor(obliterator)\\n-- subObliterator is another Janitor!\\n```\\n\\n### TypeScript:\\n\\n```ts\\nimport { Janitor } from \\"@rbxts/janitor\\";\\nimport JanitorUtilities from \\"@rbxts/janitor-utilities\\";\\n\\nconst obliterator = new Janitor();\\nconst subObliterator = JanitorUtilities.AddNewJanitor(obliterator);\\n```","params":[{"name":"janitor","desc":"The Janitor to create a new Janitor in.","lua_type":"Janitor"},{"name":"index?","desc":"The index that can be used to clean up the Janitor manually.","lua_type":"unknown"}],"returns":[{"desc":"The new Janitor.","lua_type":"Janitor"}],"function_type":"static","source":{"line":35,"path":"src/AddNewJanitor.luau"}},{"name":"AddBindToRenderStep","desc":"Adds a [RunService.BindToRenderStep] to the passed Janitor.\\n\\n### Luau:\\n\\n```lua\\nlocal obliterator = Janitor.new()\\nJanitorUtilities.AddBindToRenderStep(obliterator, \\"Update\\", 9999, function() end)\\n```\\n\\n### TypeScript:\\n\\n```ts\\nimport { Janitor } from \\"@rbxts/janitor\\";\\nimport JanitorUtilities from \\"@rbxts/janitor-utilities\\";\\n\\nconst obliterator = new Janitor<{ readonly update: () => void }>();\\nJanitorUtilities.AddBindToRenderStep(obliterator, \\"update\\", 9999, () => {});\\n```","params":[{"name":"janitor","desc":"The Janitor to add the binding to.","lua_type":"Janitor"},{"name":"name","desc":"The name of the binding.","lua_type":"string"},{"name":"priority","desc":"The priority of the binding.","lua_type":"number"},{"name":"callback","desc":"The callback to bind.","lua_type":"(deltaTime: number) -> ()"}],"returns":[{"desc":"A function to cleanup the binding.","lua_type":"() -> ()"}],"function_type":"static","errors":[{"lua_type":"ContextError","desc":"Thrown if the function is not called on the client."}],"realm":["Client"],"source":{"line":41,"path":"src/AddBindToRenderStep.luau"}}],"properties":[{"name":"Janitor","desc":"A pointer to the [Janitor](https://howmanysmall.github.io/Janitor/api/Janitor) class.","lua_type":"Janitor","readonly":true,"source":{"line":36,"path":"src/init.luau"}}],"types":[],"name":"JanitorUtilities","desc":"A bunch of utilities to deal with Janitors.","source":{"line":21,"path":"src/init.luau"}}')}}]);