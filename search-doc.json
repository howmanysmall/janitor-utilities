[{"title":"Getting Started with JanitorUtilities","type":0,"sectionRef":"#","url":"/janitor-utilities/docs/intro","content":"Getting Started with JanitorUtilities Here are some quick links to get started using JanitorUtilities: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/janitor-utilities/docs/installation","content":"","keywords":""},{"title":"Method 1 - Manual​","type":1,"pageTitle":"Installation","url":"/janitor-utilities/docs/installation#method-1---manual","content":"Visit the latest releaseUnder Assets, click JanitorUtilities.rbxm Using Rojo? Put the file somewhere where Rojo can sync it.Using Roblox Studio? Drag the file onto the viewport. It should insert under Workspace. "},{"title":"Method 2 - Wally​","type":1,"pageTitle":"Installation","url":"/janitor-utilities/docs/installation#method-2---wally","content":"Setup Wally by using wally init.Add howmanysmall/janitor-utilities as a dependency. [dependencies] JanitorUtilities = &quot;howmanysmall/janitor-utilities@^1.0.0&quot;  "},{"title":"JanitorUtilities","type":0,"sectionRef":"#","url":"/janitor-utilities/api/JanitorUtilities","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#properties","content":" "},{"title":"Janitor​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#Janitor","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; JanitorUtilities.Janitor: Janitor A pointer to the Janitor class. "},{"title":"Functions​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#functions","content":" "},{"title":"AddClone​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#AddClone","content":"&lt;/&gt; JanitorUtilities.AddClone( janitor: Janitor,-- The Janitor to add the object to. object: Instance ,-- The Instance to clone. methodName?: string,-- The name of the method that will be used to clean up. If not passed, it will first check if the object's type exists in TypeDefaults, and if that doesn't exist, it assumes Destroy. index?: unknown,-- The index that can be used to clean up the object manually. ...: A...-- The arguments that will be passed to the constructor. ) → T-- The constructed object. Clones an Instance and adds it to the Janitor. Luau: local obliterator = Janitor.new() local newPart = JanitorUtilities.AddClone(obliterator, Instance.new(&quot;Part&quot;)) TypeScript: import { Janitor } from &quot;@rbxts/janitor&quot;; import JanitorUtilities from &quot;@rbxts/janitor-utilities&quot;; const obliterator = new Janitor(); const newPart = JanitorUtilities.AddClone(obliterator, new Instance(&quot;Part&quot;));   "},{"title":"AddObject​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#AddObject","content":"&lt;/&gt; JanitorUtilities.AddObject( janitor: Janitor,-- The Janitor to add the object to. constructor: {new: (A...) → T},-- The constructor for the object you want to add to the Janitor. methodName?: boolean | string,-- The name of the method that will be used to clean up. If not passed, it will first check if the object's type exists in TypeDefaults, and if that doesn't exist, it assumes Destroy. index?: unknown,-- The index that can be used to clean up the object manually. ...: A...-- The arguments that will be passed to the constructor. ) → T-- The constructed object. Constructs an object for you and adds it to the Janitor. It's really just shorthand for Janitor:Add(object.new(), methodName, index). This did originally exist as part of Janitor's API, but it has since been removed in favor of this library. Luau: local obliterator = Janitor.new() local subObliterator = JanitorUtilities.AddObject(obliterator, Janitor, &quot;Destroy&quot;) -- subObliterator is another Janitor! TypeScript: import { Janitor } from &quot;@rbxts/janitor&quot;; import JanitorUtilities from &quot;@rbxts/janitor-utilities&quot;; const obliterator = new Janitor(); const subObliterator = JanitorUtilities.AddObject(obliterator, Janitor, &quot;Destroy&quot;);   "},{"title":"AddConnect​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#AddConnect","content":"&lt;/&gt; JanitorUtilities.AddConnect( janitor: Janitor,-- The Janitor to add the connection to. signal: Connectable,-- The signal to connect to. callback: (A...) → (),-- The callback to connect. index?: unknown-- The index that can be used to clean up the ) → ConnectionLike-- The connection that was added. Connects a callback to a signal and adds the returned connection to the Janitor. Luau: local obliterator = Janitor.new() JanitorUtilities.AddConnect(obliterator, script.ChildAdded, function(child) end) TypeScript: import { Janitor } from &quot;@rbxts/janitor&quot;; import JanitorUtilities from &quot;@rbxts/janitor-utilities&quot;; const obliterator = new Janitor(); JanitorUtilities.AddConnect(obliterator, script.ChildAdded, (child) =&gt; {}); connection manually.  "},{"title":"AddNewJanitor​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#AddNewJanitor","content":"&lt;/&gt; JanitorUtilities.AddNewJanitor( janitor: Janitor,-- The Janitor to create a new Janitor in. index?: unknown-- The index that can be used to clean up the Janitor manually. ) → Janitor-- The new Janitor. Adds a new sub-Janitor to the passed Janitor. Luau: local obliterator = Janitor.new() local subObliterator = JanitorUtilities.AddNewJanitor(obliterator) -- subObliterator is another Janitor! TypeScript: import { Janitor } from &quot;@rbxts/janitor&quot;; import JanitorUtilities from &quot;@rbxts/janitor-utilities&quot;; const obliterator = new Janitor(); const subObliterator = JanitorUtilities.AddNewJanitor(obliterator);   "},{"title":"AddBindToRenderStep​","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities#AddBindToRenderStep","content":"This item only works when running on the client. Client &lt;/&gt; JanitorUtilities.AddBindToRenderStep( janitor: Janitor,-- The Janitor to add the binding to. name: string,-- The name of the binding. priority: number,-- The priority of the binding. callback: (deltaTime: number) → ()-- The callback to bind. ) → () → ()-- A function to cleanup the binding. Adds a RunService.BindToRenderStep to the passed Janitor. Luau: local obliterator = Janitor.new() JanitorUtilities.AddBindToRenderStep(obliterator, &quot;Update&quot;, 9999, function() end) TypeScript: import { Janitor } from &quot;@rbxts/janitor&quot;; import JanitorUtilities from &quot;@rbxts/janitor-utilities&quot;; const obliterator = new Janitor&lt;{ readonly update: () =&gt; void }&gt;(); JanitorUtilities.AddBindToRenderStep(obliterator, &quot;update&quot;, 9999, () =&gt; {});  "},{"title":"Errors","type":1,"pageTitle":"JanitorUtilities","url":"/janitor-utilities/api/JanitorUtilities##","content":"Type\tDescriptionContextError\tThrown if the function is not called on the client. "}]